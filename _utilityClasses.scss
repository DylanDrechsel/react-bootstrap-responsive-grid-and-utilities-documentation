/**
 * COMPLETE BOOTSTRAP-INSPIRED UTILITY CLASSES
 * 
 * This file contains comprehensive utility classes matching React Bootstrap's functionality.
 * All utilities support responsive breakpoints and include !important declarations
 * to ensure they override other styles when needed.
 */

@use "sass:map";
@use "sass:meta";

$grid-breakpoints: (
    xxs: 0,
    xs: 576px,
    sm: 768px,
    md: 992px, 
    lg: 1200px, 
    xl: 1400px,
    xxl: 1600px
);

@mixin media-breakpoint-up($name) {
    $min: map.get($map: $grid-breakpoints, $key: $name);
    @if $min != 0 {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

/**
 * DISPLAY UTILITIES
 * 
 * Control the display property of elements with responsive variants.
 * Classes: .d-{value}, .d-{breakpoint}-{value}
 */

$displays: (
    none: none,
    inline: inline,
    inline-block: inline-block,
    block: block,
    grid: grid,
    table: table,
    table-cell: table-cell,
    table-row: table-row,
    flex: flex,
    inline-flex: inline-flex
);

// Base display classes (apply to all breakpoints)
@each $display, $value in $displays {
    .d-#{$display} {
        display: #{$value} !important;
    }
}

// Print display classes
@each $display, $value in $displays {
    .d-print-#{$display} {
        display: #{$value} !important;
    }
}

// Responsive display classes
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $display, $value in $displays {
            .d-#{$breakpoint}-#{$display} {
                display: #{$value} !important;
            }
        }
    }
}

/**
 * FLEXBOX UTILITIES
 * 
 * Comprehensive flexbox utilities for layout control.
 */

// Flex Direction
$flex-directions: (
    row: row,
    row-reverse: row-reverse,
    column: column,
    column-reverse: column-reverse
);

@each $direction, $value in $flex-directions {
    .flex-#{$direction} {
        flex-direction: #{$value} !important;
    }
}

// Responsive flex direction
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $direction, $value in $flex-directions {
            .flex-#{$breakpoint}-#{$direction} {
                flex-direction: #{$value} !important;
            }
        }
    }
}

// Flex Wrap
$flex-wraps: (
    wrap: wrap,
    nowrap: nowrap,
    wrap-reverse: wrap-reverse
);

@each $wrap, $value in $flex-wraps {
    .flex-#{$wrap} {
        flex-wrap: #{$value} !important;
    }
}

// Responsive flex wrap
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $wrap, $value in $flex-wraps {
            .flex-#{$breakpoint}-#{$wrap} {
                flex-wrap: #{$value} !important;
            }
        }
    }
}

// Justify Content
$justify-contents: (
    start: flex-start,
    end: flex-end,
    center: center,
    between: space-between,
    around: space-around,
    evenly: space-evenly
);

@each $justify, $value in $justify-contents {
    .justify-content-#{$justify} {
        justify-content: #{$value} !important;
    }
}

// Responsive justify content
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $justify, $value in $justify-contents {
            .justify-content-#{$breakpoint}-#{$justify} {
                justify-content: #{$value} !important;
            }
        }
    }
}

// Align Items
$align-items: (
    start: flex-start,
    end: flex-end,
    center: center,
    baseline: baseline,
    stretch: stretch
);

@each $align, $value in $align-items {
    .align-items-#{$align} {
        align-items: #{$value} !important;
    }
}

// Responsive align items
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $align, $value in $align-items {
            .align-items-#{$breakpoint}-#{$align} {
                align-items: #{$value} !important;
            }
        }
    }
}

// Align Content
$align-contents: (
    start: flex-start,
    end: flex-end,
    center: center,
    between: space-between,
    around: space-around,
    stretch: stretch
);

@each $align, $value in $align-contents {
    .align-content-#{$align} {
        align-content: #{$value} !important;
    }
}

// Responsive align content
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $align, $value in $align-contents {
            .align-content-#{$breakpoint}-#{$align} {
                align-content: #{$value} !important;
            }
        }
    }
}

// Align Self
$align-selfs: (
    auto: auto,
    start: flex-start,
    end: flex-end,
    center: center,
    baseline: baseline,
    stretch: stretch
);

@each $align, $value in $align-selfs {
    .align-self-#{$align} {
        align-self: #{$value} !important;
    }
}

// Responsive align self
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $align, $value in $align-selfs {
            .align-self-#{$breakpoint}-#{$align} {
                align-self: #{$value} !important;
            }
        }
    }
}

// Flex Grow & Shrink
.flex-fill {
    flex: 1 1 auto !important;
}

.flex-grow-0 {
    flex-grow: 0 !important;
}

.flex-grow-1 {
    flex-grow: 1 !important;
}

.flex-shrink-0 {
    flex-shrink: 0 !important;
}

.flex-shrink-1 {
    flex-shrink: 1 !important;
}

// Responsive flex-fill, flex-grow, and flex-shrink classes
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        .flex-#{$breakpoint}-fill {
            flex: 1 1 auto !important;
        }
        .flex-#{$breakpoint}-grow-0 {
            flex-grow: 0 !important;
        }
        .flex-#{$breakpoint}-grow-1 {
            flex-grow: 1 !important;
        }
        .flex-#{$breakpoint}-shrink-0 {
            flex-shrink: 0 !important;
        }
        .flex-#{$breakpoint}-shrink-1 {
            flex-shrink: 1 !important;
        }
    }
}

/**
 * ORDER UTILITIES
 *
 * Change the visual order of flex items.
 * Classes: .order-{value}, .order-{breakpoint}-{value}
 */

$order-values: (
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5
);

// Base order classes
@each $order, $value in $order-values {
    .order-#{$order} {
        order: #{$value} !important;
    }
}

// Responsive order classes
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $order, $value in $order-values {
            .order-#{$breakpoint}-#{$order} {
                order: #{$value} !important;
            }
        }
    }
}

// Order first/last
.order-first {
    order: -1 !important;
}

.order-last {
    order: 6 !important; // Bootstrap uses 6 for last
}

// Responsive order first/last
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        .order-#{$breakpoint}-first {
            order: -1 !important;
        }
        .order-#{$breakpoint}-last {
            order: 6 !important; // Bootstrap uses 6 for last
        }
    }
}

/**
 * VERTICAL ALIGNMENT UTILITIES
 *
 * Easily change the vertical alignment of inline, inline-block,
 * inline-table, and table cell elements.
 * Classes: .align-{value}
 */

$vertical-aligns: (
    baseline: baseline,
    top: top,
    middle: middle,
    bottom: bottom,
    text-top: text-top,
    text-bottom: text-bottom
);

@each $align, $value in $vertical-aligns {
    .align-#{$align} {
        vertical-align: #{$value} !important;
    }
}

/**
 * SPACING UTILITIES
 * 
 * Margin and padding utilities with responsive variants.
 * Classes: .{property}{sides}-{size}, .{property}{sides}-{breakpoint}-{size}
 * 
 * Properties: m (margin), p (padding)
 * Sides: t (top), b (bottom), s (start/left), e (end/right), x (horizontal), y (vertical)
 * Sizes: 0, 1, 2, 3, 4, 5,6, 7, 8, auto
 */

$spacer: 1rem;
$spacers: (
    0: 0,
    1: $spacer * 0.25,   // 4px
    2: $spacer * 0.5,    // 8px
    3: $spacer * 0.75,   // 12px
    4: $spacer,          // 16px
    5: $spacer * 1.5,    // 24px
    6: $spacer * 2.25,   // 36px
    7: $spacer * 3,      // 48px
    8: $spacer * 4       // 64px
);

$properties: (
    m: margin,
    p: padding
);

$sides: (
    t: top,
    b: bottom,
    s: left,   // start (left in LTR)
    e: right,  // end (right in LTR)
    x: (left, right),    // horizontal
    y: (top, bottom)     // vertical
);

// Generate spacing classes
@each $prop, $prop-name in $properties {
    @each $size, $length in $spacers {
        // All sides
        .#{$prop}-#{$size} {
            #{$prop-name}: #{$length} !important;
        }
        
        // Individual sides
        @each $side, $side-name in $sides {
            @if meta.type-of($side-name) == list {
                // Handle x and y (multiple sides)
                .#{$prop}#{$side}-#{$size} {
                    @each $s in $side-name {
                        #{$prop-name}-#{$s}: #{$length} !important;
                    }
                }
            } @else {
                // Handle individual sides
                .#{$prop}#{$side}-#{$size} {
                    #{$prop-name}-#{$side-name}: #{$length} !important;
                }
            }
        }
    }
    
    // Auto margins
    .#{$prop}-auto {
        #{$prop-name}: auto !important;
    }
    
    @each $side, $side-name in $sides {
        @if meta.type-of($side-name) == list {
            .#{$prop}#{$side}-auto {
                @each $s in $side-name {
                    #{$prop-name}-#{$s}: auto !important;
                }
            }
        } @else {
            .#{$prop}#{$side}-auto {
                #{$prop-name}-#{$side-name}: auto !important;
            }
        }
    }
}

// Responsive spacing classes
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $prop, $prop-name in $properties {
            @each $size, $length in $spacers {
                // All sides
                .#{$prop}-#{$breakpoint}-#{$size} {
                    #{$prop-name}: #{$length} !important;
                }
                
                // Individual sides
                @each $side, $side-name in $sides {
                    @if meta.type-of($side-name) == list {
                        .#{$prop}#{$side}-#{$breakpoint}-#{$size} {
                            @each $s in $side-name {
                                #{$prop-name}-#{$s}: #{$length} !important;
                            }
                        }
                    } @else {
                        .#{$prop}#{$side}-#{$breakpoint}-#{$size} {
                            #{$prop-name}-#{$side-name}: #{$length} !important;
                        }
                    }
                }
            }
            
            // Auto margins
            .#{$prop}-#{$breakpoint}-auto {
                #{$prop-name}: auto !important;
            }
            
            @each $side, $side-name in $sides {
                @if meta.type-of($side-name) == list {
                    .#{$prop}#{$side}-#{$breakpoint}-auto {
                        @each $s in $side-name {
                            #{$prop-name}-#{$s}: auto !important;
                        }
                    }
                } @else {
                    .#{$prop}#{$side}-#{$breakpoint}-auto {
                        #{$prop-name}-#{$side-name}: auto !important;
                    }
                }
            }
        }
    }
}

// Negative margins 
@each $size, $length in $spacers {
    @if $size != 0 {
        .m-n#{$size} {
            margin: -#{$length} !important;
        }
        
        @each $side, $side-name in $sides {
            @if meta.type-of($side-name) == list {
                .m#{$side}-n#{$size} {
                    @each $s in $side-name {
                        margin-#{$s}: -#{$length} !important;
                    }
                }
            } @else {
                .m#{$side}-n#{$size} {
                    margin-#{$side-name}: -#{$length} !important;
                }
            }
        }
    }
}

// Responsive negative margins
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $size, $length in $spacers {
            @if $size != 0 {
                .m-#{$breakpoint}-n#{$size} {
                    margin: -#{$length} !important;
                }
                
                @each $side, $side-name in $sides {
                    @if meta.type-of($side-name) == list {
                        .m#{$side}-#{$breakpoint}-n#{$size} {
                            @each $s in $side-name {
                                margin-#{$s}: -#{$length} !important;
                            }
                        }
                    } @else {
                        .m#{$side}-#{$breakpoint}-n#{$size} {
                            margin-#{$side-name}: -#{$length} !important;
                        }
                    }
                }
            }
        }
    }
}

/**
 * TEXT UTILITIES
 * 
 * Text alignment, transformation, and styling utilities.
 */

// Text Alignment
$text-aligns: (
    center: center,
    justify: justify,
    start: left,
    end: right
);

@each $align, $value in $text-aligns {
    .text-#{$align} {
        text-align: #{$value} !important;
    }
}

// Responsive text alignment
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $align, $value in $text-aligns {
            .text-#{$breakpoint}-#{$align} {
                text-align: #{$value} !important;
            }
        }
    }
}

// Text Transform
.text-lowercase {
    text-transform: lowercase !important;
}

.text-uppercase {
    text-transform: uppercase !important;
}

.text-capitalize {
    text-transform: capitalize !important;
}

// Text Wrapping 
.text-wrap {
    white-space: normal !important;
}

.text-nowrap {
    white-space: nowrap !important;
}

.text-break {
    word-wrap: break-word !important;
    word-break: break-word !important;
}

.text-truncate {
    overflow: hidden !important;
    text-overflow: ellipsis !important;
    white-space: nowrap !important;
}

// Font Weight
.fw-light {
    font-weight: 300 !important;
}

.fw-lighter {
    font-weight: lighter !important;
}

.fw-normal {
    font-weight: 400 !important;
}

.fw-bold {
    font-weight: 700 !important;
}

.fw-bolder {
    font-weight: bolder !important;
}

// Font Style
.fst-italic {
    font-style: italic !important;
}

.fst-normal {
    font-style: normal !important;
}

// Text Decoration
.text-decoration-none {
    text-decoration: none !important;
}

.text-decoration-underline {
    text-decoration: underline !important;
}

.text-decoration-line-through {
    text-decoration: line-through !important;
}

// Line Height
.lh-1 {
    line-height: 1 !important;
}

.lh-sm {
    line-height: 1.25 !important;
}

.lh-base {
    line-height: 1.5 !important;
}

.lh-lg {
    line-height: 2 !important;
}

// Font Size
.fs-1 {
    font-size: 2.5rem !important;
}

.fs-2 {
    font-size: 2rem !important;
}

.fs-3 {
    font-size: 1.75rem !important;
}

.fs-4 {
    font-size: 1.5rem !important;
}

.fs-5 {
    font-size: 1.25rem !important;
}

.fs-6 {
    font-size: 1rem !important;
}

// Text Selection
.user-select-all {
    user-select: all !important;
}

.user-select-auto {
    user-select: auto !important;
}

.user-select-none {
    user-select: none !important;
}

// Pointer Events
.pe-none {
    pointer-events: none !important;
}

.pe-auto {
    pointer-events: auto !important;
}

/**
 * SIZING UTILITIES
 * 
 * Width and height utilities with percentage and viewport units.
 */

$sizes: (
    25: 25%,
    50: 50%,
    75: 75%,
    100: 100%,
    auto: auto
);

// Width utilities
@each $size, $value in $sizes {
    .w-#{$size} {
        width: #{$value} !important;
    }
}

// Height utilities
@each $size, $value in $sizes {
    .h-#{$size} {
        height: #{$value} !important;
    }
}

// Max width and height
.mw-100 {
    max-width: 100% !important;
}

.mh-100 {
    max-height: 100% !important;
}

// Min width and height
.min-vw-100 {
    min-width: 100vw !important;
}

.min-vh-100 {
    min-height: 100vh !important;
}

// Viewport sizing
.vw-100 {
    width: 100vw !important;
}

.vh-100 {
    height: 100vh !important;
}

/**
 * POSITION UTILITIES
 * 
 * Position and placement utilities.
 */

.position-static {
    position: static !important;
}

.position-relative {
    position: relative !important;
}

.position-absolute {
    position: absolute !important;
}

.position-fixed {
    position: fixed !important;
}

.position-sticky {
    position: sticky !important;
}

// Top, bottom, start, end positioning
$positions: (
    0: 0,
    50: 50%,
    100: 100%
);

@each $position, $value in $positions {
    .top-#{$position} {
        top: #{$value} !important;
    }
    
    .bottom-#{$position} {
        bottom: #{$value} !important;
    }
    
    .start-#{$position} {
        left: #{$value} !important;
    }
    
    .end-#{$position} {
        right: #{$value} !important;
    }
}

// Translate utilities for centering
.translate-middle {
    transform: translate(-50%, -50%) !important;
}

.translate-middle-x {
    transform: translateX(-50%) !important;
}

.translate-middle-y {
    transform: translateY(-50%) !important;
}

/**
 * BORDER UTILITIES
 * 
 * Border utilities for adding and removing borders.
 */

.border {
    border: 1px solid #dee2e6 !important;
}

.border-0 {
    border: 0 !important;
}

.border-top {
    border-top: 1px solid #dee2e6 !important;
}

.border-top-0 {
    border-top: 0 !important;
}

.border-end {
    border-right: 1px solid #dee2e6 !important;
}

.border-end-0 {
    border-right: 0 !important;
}

.border-bottom {
    border-bottom: 1px solid #dee2e6 !important;
}

.border-bottom-0 {
    border-bottom: 0 !important;
}

.border-start {
    border-left: 1px solid #dee2e6 !important;
}

.border-start-0 {
    border-left: 0 !important;
}

// Border width
.border-1 {
    border-width: 1px !important;
}

.border-2 {
    border-width: 2px !important;
}

.border-3 {
    border-width: 3px !important;
}

.border-4 {
    border-width: 4px !important;
}

.border-5 {
    border-width: 5px !important;
}

// Rounded corners
.rounded {
    border-radius: 0.375rem !important;
}

.rounded-0 {
    border-radius: 0 !important;
}

.rounded-1 {
    border-radius: 0.25rem !important;
}

.rounded-2 {
    border-radius: 0.375rem !important;
}

.rounded-3 {
    border-radius: 0.5rem !important;
}

.rounded-4 {
    border-radius: 0.75rem !important;
}

.rounded-5 {
    border-radius: 1rem !important;
}

.rounded-circle {
    border-radius: 50% !important;
}

.rounded-pill {
    border-radius: 50rem !important;
}

// Rounded corners by side
.rounded-top {
    border-top-left-radius: 0.375rem !important;
    border-top-right-radius: 0.375rem !important;
}

.rounded-end {
    border-top-right-radius: 0.375rem !important;
    border-bottom-right-radius: 0.375rem !important;
}

.rounded-bottom {
    border-bottom-left-radius: 0.375rem !important;
    border-bottom-right-radius: 0.375rem !important;
}

.rounded-start {
    border-top-left-radius: 0.375rem !important;
    border-bottom-left-radius: 0.375rem !important;
}

/**
 * OVERFLOW UTILITIES
 * 
 * Control element overflow behavior.
 */

.overflow-auto {
    overflow: auto !important;
}

.overflow-hidden {
    overflow: hidden !important;
}

.overflow-visible {
    overflow: visible !important;
}

.overflow-scroll {
    overflow: scroll !important;
}

// Individual axis overflow
.overflow-x-auto {
    overflow-x: auto !important;
}

.overflow-x-hidden {
    overflow-x: hidden !important;
}

.overflow-x-visible {
    overflow-x: visible !important;
}

.overflow-x-scroll {
    overflow-x: scroll !important;
}

.overflow-y-auto {
    overflow-y: auto !important;
}

.overflow-y-hidden {
    overflow-y: hidden !important;
}

.overflow-y-visible {
    overflow-y: visible !important;
}

.overflow-y-scroll {
    overflow-y: scroll !important;
}

/**
 * VISIBILITY UTILITIES
 * 
 * Control element visibility.
 */

.visible {
    visibility: visible !important;
}

.invisible {
    visibility: hidden !important;
}

/**
 * SHADOW UTILITIES
 * 
 * Box shadow utilities for depth and elevation.
 */

.shadow-none {
    box-shadow: none !important;
}

.shadow-sm {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;
}

.shadow {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
}

.shadow-lg {
    box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175) !important;
}

/**
 * OPACITY UTILITIES
 * 
 * Control element opacity.
 */

$opacities: (
    0: 0,
    25: 0.25,
    50: 0.5,
    75: 0.75,
    100: 1
);

@each $opacity, $value in $opacities {
    .opacity-#{$opacity} {
        opacity: #{$value} !important;
    }
}

/**
 * Z-INDEX UTILITIES
 * 
 * Control element stacking order.
 */

$z-indexes: (
    n1: -1,
    0: 0,
    1: 1,
    2: 2,
    3: 3
);

@each $index, $value in $z-indexes {
    .z-#{$index} {
        z-index: #{$value} !important;
    }
}

/**
 * INTERACTION UTILITIES
 * 
 * Control user interaction with elements.
 */

// Cursor
.cursor-auto {
    cursor: auto !important;
}

.cursor-default {
    cursor: default !important;
}

.cursor-pointer {
    cursor: pointer !important;
}

.cursor-wait {
    cursor: wait !important;
}

.cursor-text {
    cursor: text !important;
}

.cursor-move {
    cursor: move !important;
}

.cursor-help {
    cursor: help !important;
}

.cursor-not-allowed {
    cursor: not-allowed !important;
}

// Focus
.focus-ring:focus {
    outline: 0 !important;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25) !important;
}

/**
 * OBJECT FIT UTILITIES
 * 
 * Control how images and videos fit their containers.
 */

.object-fit-contain {
    object-fit: contain !important;
}

.object-fit-cover {
    object-fit: cover !important;
}

.object-fit-fill {
    object-fit: fill !important;
}

.object-fit-scale {
    object-fit: scale-down !important;
}

.object-fit-none {
    object-fit: none !important;
}

/**
 * ASPECT RATIO UTILITIES
 * 
 * Control aspect ratios of elements.
 */

.ratio {
    position: relative !important;
    width: 100% !important;
    
    &::before {
        display: block;
        padding-top: var(--bs-aspect-ratio);
        content: "";
    }
    
    > * {
        position: absolute !important;
        top: 0 !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
    }
}

.ratio-1x1 {
    --bs-aspect-ratio: 100%;
}

.ratio-4x3 {
    --bs-aspect-ratio: 75%;
}

.ratio-16x9 {
    --bs-aspect-ratio: 56.25%;
}

.ratio-21x9 {
    --bs-aspect-ratio: 42.857143%;
}

/**
 * FLOAT UTILITIES
 * 
 * Float elements left, right, or clear floats.
 */

.float-start {
    float: left !important;
}

.float-end {
    float: right !important;
}

.float-none {
    float: none !important;
}

// Responsive floats
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        .float-#{$breakpoint}-start {
            float: left !important;
        }
        
        .float-#{$breakpoint}-end {
            float: right !important;
        }
        
        .float-#{$breakpoint}-none {
            float: none !important;
        }
    }
}

// Clearfix
.clearfix::after {
    display: block;
    clear: both;
    content: "";
}

/**
 * GAP UTILITIES
 * 
 * Control gaps in flexbox and grid layouts.
 */

$gaps: (
    0: 0,
    1: 0.25rem,
    2: 0.5rem,
    3: 1rem,
    4: 1.5rem,
    5: 3rem
);

@each $size, $value in $gaps {
    .gap-#{$size} {
        gap: #{$value} !important;
    }
    
    .row-gap-#{$size} {
        row-gap: #{$value} !important;
    }
    
    .column-gap-#{$size} {
        column-gap: #{$value} !important;
    }
}

// Responsive gaps
@each $breakpoint in map.keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        @each $size, $value in $gaps {
            .gap-#{$breakpoint}-#{$size} {
                gap: #{$value} !important;
            }
            
            .row-gap-#{$breakpoint}-#{$size} {
                row-gap: #{$value} !important;
            }
            
            .column-gap-#{$breakpoint}-#{$size} {
                column-gap: #{$value} !important;
            }
        }
    }
}